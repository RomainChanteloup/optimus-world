/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/cybertruck/model.gltf
https://market.pmnd.rs/model/cybertruck
*/
        
import * as THREE from 'three'
import { useGLTF, } from '@react-three/drei'
import cybertruckGLTF from '../assets/cybertruck.gltf?url'
import { GLTF } from 'three-stdlib'
import { RefObject, forwardRef } from 'react'
import { RapierRigidBody, RigidBody, RigidBodyProps } from '@react-three/rapier'
import { RapierRaycastVehicle, WheelOptions } from '../lib/rapier-raycast-vehicle'
import { Object3D } from 'three'


interface CybertruckGLTF extends GLTF {
    nodes: {
      tires: THREE.Mesh,
      steer: THREE.Mesh,
      interior003: THREE.Mesh,
      interior003_1: THREE.Mesh,
      interior003_2: THREE.Mesh,
      interior003_3: THREE.Mesh,
      interior003_4: THREE.Mesh,
      interior003_5: THREE.Mesh
    }
    materials: {
      ['rubber.002']: THREE.MeshStandardMaterial,
      ['gray.002']: THREE.MeshStandardMaterial,
      ['light_f.002']: THREE.MeshStandardMaterial,
      ['body.002']: THREE.MeshStandardMaterial,
      glass_crack: THREE.MeshStandardMaterial,
      ['glassgray.002']: THREE.MeshStandardMaterial,
      Light: THREE.MeshStandardMaterial
    }
}

export type VehicleProps = RigidBodyProps

type RaycastVehicleWheel = {
    options: WheelOptions
    object: RefObject<Object3D>
}

export type VehicleRef = {
    chassisRigidBody: RefObject<RapierRigidBody>
    rapierRaycastVehicle: RefObject<RapierRaycastVehicle>
    wheels: RaycastVehicleWheel[]
    setBraking: (braking: boolean) => void
}

export const Cybertruck = forwardRef<VehicleRef, VehicleProps>(({ children, ...groupProps }, ref) => {
    const { nodes, materials } = useGLTF(cybertruckGLTF) as CybertruckGLTF

    return (

        <>
            <RigidBody {...groupProps} 
            // ref={chassisRigidBodyRef} 
            mass={150}>
                <group dispose={null}>
                    <mesh castShadow receiveShadow geometry={nodes.tires.geometry} material={materials['rubber.002']} />
                    <mesh castShadow receiveShadow geometry={nodes.steer.geometry} material={nodes.steer.material} />
                    <mesh castShadow receiveShadow geometry={nodes.interior003.geometry} material={nodes.interior003.material} />
                    <mesh castShadow receiveShadow geometry={nodes.interior003_1.geometry} material={materials['light_f.002']} />
                    <mesh castShadow receiveShadow geometry={nodes.interior003_2.geometry} material={materials['body.002']} />
                    <mesh castShadow receiveShadow geometry={nodes.interior003_3.geometry} material={materials.glass_crack} />
                    <mesh castShadow receiveShadow geometry={nodes.interior003_4.geometry} material={materials['glassgray.002']} />
                    <mesh castShadow receiveShadow geometry={nodes.interior003_5.geometry} material={materials.Light} />
                    {children}
                </group>
            </RigidBody>
        </>
    )
})
